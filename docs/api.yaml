swagger: '2.0'
host: 127.0.0.1:10001
basePath: /
info:
  title: rbac learn
  description: my rbac learning repository
  version: '1.0'
  license: {}
  contact: {}
securityDefinitions:
  Jwt:
    type: apiKey
    name: Authorization
    in: header
paths:
  /v1/auth/login:
    post:
      operationId: v1-auth-login-post
      summary: Login
      tags:
      - Authorization
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: param
        in: body
        required: true
        description: Request parameter
        schema:
          $ref: '#/definitions/LoginParam'
      security: []
      responses:
        '200':
          schema:
            $ref: '#/definitions/Result<LoginDto>'
  /v1/auth/register:
    post:
      operationId: v1-auth-register-post
      summary: Register
      tags:
      - Authorization
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: param
        in: body
        required: true
        description: Request parameter
        schema:
          $ref: '#/definitions/RegisterParam'
      security: []
      responses:
        '200':
          schema:
            $ref: '#/definitions/Result<UserDto>'
  /v1/auth/token:
    post:
      operationId: v1-auth-token-post
      summary: Refresh token
      tags:
      - Authorization
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: param
        in: body
        required: true
        description: Request parameter
        schema:
          $ref: '#/definitions/TokenParam'
      security: []
      responses:
        '200':
          schema:
            $ref: '#/definitions/Result<TokenDto>'
  /v1/auth:
    get:
      operationId: v1-auth-get
      summary: Current user
      tags:
      - Authorization
      consumes:
      - application/json
      produces:
      - application/json
      security:
      - Jwt: []
      responses:
        '200':
          schema:
            $ref: '#/definitions/Result<UserDto>'
  /v1/auth/logout:
    post:
      operationId: v1-auth-logout-post
      summary: Logout
      tags:
      - Authorization
      consumes:
      - application/json
      produces:
      - application/json
      security:
      - Jwt: []
      responses:
        '200':
          schema:
            $ref: '#/definitions/Result'
  /v1/auth/password:
    put:
      operationId: v1-auth-password-put
      summary: Reset password
      tags:
      - Authorization
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: param
        in: body
        required: true
        description: Request parameter
        schema:
          $ref: '#/definitions/PasswordParam'
      security:
      - Jwt: []
      responses:
        '200':
          schema:
            $ref: '#/definitions/Result'
  /v1/policy/role/{uid}:
    put:
      operationId: v1-policy-role-uid-put
      summary: Change user role
      tags:
      - Policy
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: uid
        in: path
        type: integer
        required: true
        description: user id
      - name: param
        in: body
        required: true
        description: request parameter
        schema:
          $ref: '#/definitions/RoleParam'
      security:
      - Jwt: []
      responses:
        '200':
          schema:
            $ref: '#/definitions/Result<Page<PolicyDto>>'
  /v1/policy:
    get:
      operationId: v1-policy-get
      summary: Query policy list
      tags:
      - Policy
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: page
        in: query
        type: integer
        required: false
        description: Query page
        default: 1
      - name: limit
        in: query
        type: integer
        required: false
        description: Page size
        default: 10
      security:
      - Jwt: []
      responses:
        '200':
          schema:
            $ref: '#/definitions/Result<Page<PolicyDto>>'
    post:
      operationId: v1-policy-post
      summary: Insert policy list
      tags:
      - Policy
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: param
        in: body
        required: true
        description: request parameter
        schema:
          $ref: '#/definitions/PolicyParam'
      security:
      - Jwt: []
      responses:
        '200':
          schema:
            $ref: '#/definitions/Result'
    delete:
      operationId: v1-policy-delete
      summary: Delete policy list
      tags:
      - Policy
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: param
        in: body
        required: true
        description: request parameter
        schema:
          $ref: '#/definitions/PolicyParam'
      security:
      - Jwt: []
      responses:
        '200':
          schema:
            $ref: '#/definitions/Result'
  /v1/user:
    get:
      operationId: v1-user-get
      summary: Query user list
      tags:
      - User
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: page
        in: query
        type: integer
        required: false
        description: Query page
        default: 1
      - name: limit
        in: query
        type: integer
        required: false
        description: Page size
        default: 10
      security:
      - Jwt: []
      responses:
        '200':
          schema:
            $ref: '#/definitions/Result<Page<UserDto>>'
  /v1/user/{uid}:
    get:
      operationId: v1-user-uid-get
      summary: Query user
      tags:
      - User
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: uid
        in: path
        type: integer
        required: true
        description: user id
      security:
      - Jwt: []
      responses:
        '200':
          schema:
            $ref: '#/definitions/Result<UserDto>'
    put:
      operationId: v1-user-uid-put
      summary: Update user
      tags:
      - User
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: uid
        in: path
        type: integer
        required: true
        description: user id
      - name: param
        in: body
        required: true
        description: request parameter
        schema:
          $ref: '#/definitions/UpdateUserParam'
      security:
      - Jwt: []
      responses:
        '200':
          schema:
            $ref: '#/definitions/Result'
    delete:
      operationId: v1-user-uid-delete
      summary: Delete user
      tags:
      - User
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: uid
        in: path
        type: integer
        required: true
        description: user id
      security:
      - Jwt: []
      responses:
        '200':
          schema:
            $ref: '#/definitions/Result'
definitions:
  _LoginDto:
    title: _LoginDto
    description: login response
    type: object
    required:
    - user
    - access-token
    - refresh-token
    properties:
      user:
        description: user response
        type: object
        $ref: '#/definitions/_UserDto'
      access-token:
        description: access token
        type: string
      refresh-token:
        description: refresh token
        type: string
  _PolicyDto:
    title: _PolicyDto
    description: policy response
    type: object
    required:
    - role
    - path
    - method
    properties:
      role:
        description: policy role (sub)
        type: string
      path:
        description: policy path (obj)
        type: string
      method:
        description: policy method (act)
        type: string
  _TokenDto:
    title: _TokenDto
    description: token response
    type: object
    required:
    - access-token
    - refresh-token
    properties:
      access-token:
        description: access token
        type: string
      refresh-token:
        description: refresh token
        type: string
  _UserDto:
    title: _UserDto
    description: user response
    type: object
    required:
    - id
    - name
    - role
    properties:
      id:
        description: user id
        type: integer
      name:
        description: username
        type: string
      role:
        description: user role
        type: string
  Result:
    title: Result
    description: global response model
    type: object
    required:
    - code
    - message
    properties:
      code:
        description: status code
        type: integer
      message:
        description: status message
        type: string
  Result<TokenDto>:
    title: Result<TokenDto>
    description: token response
    type: object
    required:
    - code
    - message
    - data
    properties:
      code:
        description: status code
        type: integer
      message:
        description: status message
        type: string
      data:
        description: response data
        type: object
        $ref: '#/definitions/_TokenDto'
  Result<UserDto>:
    title: Result<UserDto>
    description: user response
    type: object
    required:
    - code
    - message
    - data
    properties:
      code:
        description: status code
        type: integer
      message:
        description: status message
        type: string
      data:
        description: response data
        type: object
        $ref: '#/definitions/_UserDto'
  Result<LoginDto>:
    title: Result<LoginDto>
    description: login response
    type: object
    required:
    - code
    - message
    - data
    properties:
      code:
        description: status code
        type: integer
      message:
        description: status message
        type: string
      data:
        description: response data
        type: object
        $ref: '#/definitions/_LoginDto'
  Page<UserDto>:
    title: Page<UserDto>
    description: user page
    type: object
    required:
    - total
    - page
    - limit
    - data
    properties:
      total:
        description: data count
        type: integer
      page:
        description: current page
        type: integer
      limit:
        description: page size
        type: integer
      data:
        description: response data
        type: array
        items:
          $ref: '#/definitions/_UserDto'
  Page<PolicyDto>:
    title: Page<PolicyDto>
    description: policy page
    type: object
    required:
    - total
    - page
    - limit
    - data
    properties:
      total:
        description: data count
        type: integer
      page:
        description: current page
        type: integer
      limit:
        description: page size
        type: integer
      data:
        description: response data
        type: array
        items:
          $ref: '#/definitions/_PolicyDto'
  Result<Page<UserDto>>:
    title: Result<Page<UserDto>>
    description: user page response
    type: object
    required:
    - code
    - message
    - data
    properties:
      code:
        description: status code
        type: integer
      message:
        description: status message
        type: string
      data:
        description: response data
        type: object
        $ref: '#/definitions/Page<UserDto>'
  Result<Page<PolicyDto>>:
    title: Result<Page<PolicyDto>>
    description: policy page response
    type: object
    required:
    - code
    - message
    - data
    properties:
      code:
        description: status code
        type: integer
      message:
        description: status message
        type: string
      data:
        description: response data
        type: object
        $ref: '#/definitions/Page<PolicyDto>'
  LoginParam:
    title: LoginParam
    description: login request parameter
    type: object
    required:
    - id
    - password
    properties:
      id:
        description: user id
        type: integer
      password:
        description: password
        type: string
  RegisterParam:
    title: RegisterParam
    description: register request parameter
    type: object
    required:
    - password
    properties:
      password:
        description: password
        type: string
      name:
        description: username
        type: string
  TokenParam:
    title: TokenParam
    description: refresh token request parameter
    type: object
    required:
    - refresh-token
    - access-token
    properties:
      refresh-token:
        description: refresh token
        type: string
      access-token:
        description: access token
        type: string
  PasswordParam:
    title: PasswordParam
    description: reset password request parameter
    type: object
    required:
    - password
    properties:
      password:
        description: new password
        type: string
  PolicyParam:
    title: PolicyParam
    description: insert / delete policy request parameter
    type: object
    required:
    - role
    - path
    - method
    properties:
      role:
        description: policy role
        type: string
      path:
        description: policy path
        type: string
      method:
        description: policy method
        type: string
  RoleParam:
    title: RoleParam
    description: change user role request parameter
    type: object
    required:
    - role
    properties:
      role:
        description: policy role
        type: string
  UpdateUserParam:
    title: UpdateUserParam
    description: update user request parameter
    type: object
    required:
    - name
    properties:
      name:
        description: username
        type: string
